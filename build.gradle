plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '17.2.0'
    id "com.github.gmazzo.buildconfig" version "3.0.3"
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

apply plugin: 'com.github.gmazzo.buildconfig'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group 'com.github.bibsysdev'
version '0.13.3'

wrapper {
    gradleVersion = '7.2'
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}



gradleLint.rules = ['unused-dependency']

dependencies {

    implementation libs.apache.commons.validator
    compileOnly libs.nva.commons.core
    testImplementation libs.nva.commons.core

    compileOnly libs.nva.commons.identifiers
    testImplementation libs.nva.commons.identifiers

    compileOnly libs.bundles.jackson
    testImplementation libs.bundles.jackson

    testImplementation libs.bundles.unittesting
    testImplementation libs.nva.testutils

    testImplementation libs.jsonld.java
    testImplementation libs.swagger.core


    testImplementation libs.javafaker
    testRuntimeOnly libs.slf4j

}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy(jacocoTestReport)

}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
    pmdMain {
        excludes = [
                '**/BuildConfig.*'
        ]
    }
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
    exclude '**/BuildConfig*'


}

buildConfig {
    className("BuildConfig")   // forces the class name. Defaults to 'BuildConfig'
    packageName(project.group)  // forces the package. Defaults to '${project.group}'
    useJavaOutput() //forces the output to be Java
    buildConfigField("String", "MODEL_VERSION", "\"${project.version}\"")
}

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty("sonatypeUsername")
            password = findProperty("sonatypePassword")
            stagingProfileId = "5ba11e4895739"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.name
                description = 'The java version of the NVA datamodel'
                url = 'https://github.com/BIBSYSDEV/nva-datamodel-java'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        name = 'Orestis Gkorgkas'
                        email = 'og@unit.no'
                        organization = 'UNIT'
                        organizationUrl = 'https://www.unit.no/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/BIBSYSDEV/nva-datamodel-java.git'
                    developerConnection = 'scm:git:ssh://github.com/BIBSYSDEV/nva-datamodel-java.git'
                    url = 'https://github.com/BIBSYSDEV/nva-datamodel-java/tree/main'
                }
            }
        }
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

boolean isMainBranch() {
    def branch = gitBranch()
    return ((branch == "master" || branch == "main"))
}

signing {
    if (isMainBranch()) {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }

}


